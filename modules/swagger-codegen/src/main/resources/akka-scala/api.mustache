package {{package}}

{{#imports}}import {{import}}
{{/imports}}
import {{invokerPackage}}.ApiInvoker
import {{invokerPackage}}.ApiException

import scala.collection.mutable.HashMap
import scala.concurrent.Future

{{#operations}}
class {{classname}}(val basePath: String = "{{basePath}}") {

  private def apiInvoker = ApiInvoker
  private def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value
  {{#operation}}
  def {{operationId}} ({{#allParams}}{{paramName.toUpperCase}}: {{#required}}{{dataType}}{{/required}}{{^required}}Option[{{dataType}}]{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {{#returnType}}: Option[{{returnType}}]{{/returnType}} = {

    {{#requiredParamCount}}
      // verify required params are set
      (List({{/requiredParamCount}}{{#requiredParams}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/requiredParams}}{{#requiredParamCount}}).filter(_ != null)).size match {
        case {{requiredParamCount}} => // all required values set
        case _ => throw new Exception("missing required params")
        }
    {{/requiredParamCount}}

    val path = "{{path}}".replaceAll("\\{format\\}","json"){{#pathParams}}.replaceAll("\\{" + "{{baseName}}" + "\\}",apiInvoker.escape({{paramName}})){{/pathParams}}

    {{#bodyParam}}val contentType = Option({{paramName}}) match {
      case Some(File) => "multipart/form-data"
      case other => "application/json"
    }
    {{/bodyParam}}{{^bodyParam}}val contentType = "application/json"{{/bodyParam}}

  // query params

    val headerParams = new HashMap[String, String]
    {{^queryParams.isEmpty}}
    val queryParams = Map.empty[String, String]{{/queryParams.isEmpty}}{{#queryParams}} +
      ("{{baseName}}" -> {{paramName}}.toString){{/queryParams}}
    {{#headerParams}}headerParams += "{{baseName}}" -> {{paramName}}
    {{/headerParams}}
    try {
  apiInvoker.invokeApi(basePath, path, "{{httpMethod}}", {{^queryParams.isEmpty}}queryParams{{/queryParams.isEmpty}}{{#queryParams.isEmpty}}Map.empty[String, String]{{/queryParams.isEmpty}}, {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}None{{/bodyParam}}, headerParams.toMap, contentType) match {
        case s: String =>
          {{#returnType}} Some(ApiInvoker.deserialize(s, "{{returnContainer}}", classOf[{{returnBaseType}}]).asInstanceOf[{{returnType}}])
        {{/returnType}} 
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }
  {{/operation}}
}
{{/operations}}