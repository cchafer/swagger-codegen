package {{invokerPackage}}

import akka.actor.ActorSystem
import spray.http.HttpHeaders.RawHeader
import spray.http._

import scala.concurrent.{ExecutionContext, Future}

case class ApiRequest(
  basePath: String,
  operationPath: String,
  contentType: String,
  method: HttpMethod,
  formParams: Map[String, String] = Map.empty,
  queryParams: Map[String, String] = Map.empty,
  headerParams: Map[String, String] = Map.empty,
  responseHandler: (HttpResponse) => Any,
  additionalHeaders: Map[String, String] = Map.empty,
  credentials: Option[HttpCredentials] = None) {

    def withoutCredentials = copy(credentials = None)

    def withCredentials(cred: HttpCredentials) = copy(credentials = Some(cred))

    def withPassword(user: String, password: String) = copy(credentials = Some(BasicHttpCredentials(user, password)))

    def withHeader(name: String, value: String) = copy(additionalHeaders = additionalHeaders + (name -> value))

    def withHeaders(headersToAdd: Map[String, String]) = copy(additionalHeaders = additionalHeaders ++ headersToAdd)

    def relativePath = operationPath.replaceAll("\\{format\\}", "json")

    def uri(basePath: String) = Uri(basePath + relativePath).withQuery(queryParams)

    def headers: List[HttpHeader] = (additionalHeaders ++ headerParams) map { case (u, v) => RawHeader(u, v)} toList

    def execute(invoker: ApiInvoker)(implicit ec: ExecutionContext, system: ActorSystem): Future[Any] =
      execute(ec, system, invoker)

    def execute(implicit ec: ExecutionContext, system: ActorSystem, invoker: ApiInvoker): Future[Any] =
      invoker.execute(basePath, this) map responseHandler
}
